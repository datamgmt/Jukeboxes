[
    {
        "id": "c8fe70a7b946a093",
        "type": "tab",
        "label": "Jukebox",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2bc0b6d6993d8060",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Get Buttons",
        "func": "try {\n    // Extract inputs from msg\n    const jukeboxConfig = global.get('jukeboxConfig')\n    const sequence = msg.selections;\n    const jukeboxData = global.get('jukeboxData');\n    const jukeboxModel = jukeboxConfig.model;\n\n    // Validate required inputs\n    if (!jukeboxModel) {\n        msg.buttons = {\n            success: false,\n            error: \"global.jukeboxConfig.model is required\"\n        };\n        return msg;\n    }\n\n    if (!sequence) {\n        msg.buttons = {\n            success: false,\n            error: \"msg.selection is required\" \n        };\n        return msg;\n    }\n\n    if (!jukeboxData) {\n        msg.buttons = {\n            success: false,\n            error: \"global.jukeboxData is required\"\n        };\n        return msg;\n    }\n\n    // Find the jukebox brand and model\n    let model = null;\n    let brand = null;\n\n    for (const [brandName, brandData] of Object.entries(jukeboxData)) {\n        if (brandData.models[jukeboxModel]) {\n            brand = brandName;\n            model = brandData.models[jukeboxModel];\n            break;\n        }\n    }\n\n    // Check if model exists\n    if (!model) {\n        msg.buttons = {\n            success: false,\n            error: `Model ${jukeboxModel} not found`\n        };\n        return msg;\n    }\n\n    // Get the selection structure\n    const selection = model.selection;\n    const selectionLevels = Object.keys(selection).length;\n\n    // Validate sequence length matches selection levels\n    if (sequence.length !== selectionLevels) {\n        msg.buttons = {\n            success: false,\n            error: `Invalid sequence length. Expected ${selectionLevels} digits, got ${sequence.length}`\n        };\n        return msg;\n    }\n\n    // Validate that all characters exist in their respective selection levels\n    for (let i = 0; i < sequence.length; i++) {\n        const levelKey = String(i + 1);\n        const charValue = sequence[i];\n\n        if (!selection[levelKey] || !selection[levelKey][charValue]) {\n            msg.buttons = {\n                success: false,\n                error: `Invalid character '${charValue}' at position ${i + 1}. Valid options at level ${levelKey}: ${Object.keys(selection[levelKey]).join(\", \")}`\n            };\n            return msg;\n        }\n    }\n\n    // Extract device and relay information\n    const results = [];\n\n    for (let i = 0; i < sequence.length; i++) {\n        const levelKey = String(i + 1);\n        const charValue = sequence[i];\n\n        const selectionData = selection[levelKey][charValue];\n        results.push({\n            level: levelKey,\n            digit: charValue,\n            device: selectionData.device,\n            relay: selectionData.relay\n        });\n    }\n\n    // Return successful result\n    msg.buttons = {\n        success: true,\n        brand: brand,\n        model: jukeboxModel,\n        sequence: sequence,\n        action: model.action,\n        delay: model.delay,\n        results: results\n    };\n\n    return msg;\n\n} catch (error) {\n    msg.buttons = {\n        success: false,\n        error: `An error occurred: ${error.message}`\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 220,
        "wires": [
            [
                "22635c0b62a654f5"
            ]
        ]
    },
    {
        "id": "22635c0b62a654f5",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Get Hex",
        "func": "try {\n    // Validate msg.buttons exists and is successful\n    if (!msg.buttons) {\n        msg.hex = {\n            success: false,\n            error: \"msg.buttons is required\"\n        };\n        return msg;\n    }\n\n    if (!msg.buttons.success) {\n        msg.hex = {\n            success: false,\n            error: msg.buttons.error || \"Previous step failed\"\n        };\n        return msg;\n    }\n\n    if (!msg.buttons.results || !Array.isArray(msg.buttons.results)) {\n        msg.hex = {\n            success: false,\n            error: \"msg.buttons.results is missing or not an array\"\n        };\n        return msg;\n    }\n\n    if (!msg.buttons.action) {\n        msg.hex = {\n            success: false,\n            error: \"msg.buttons.action is required\"\n        };\n        return msg;\n    }\n\n    if (msg.buttons.delay === undefined || msg.buttons.delay === null) {\n        msg.hex = {\n            success: false,\n            error: \"msg.buttons.delay is required\"\n        };\n        return msg;\n    }\n\n    // Function to calculate CRC16 (MODBUS variant)\n    function calculateCRC16(data) {\n        let crc = 0xFFFF;\n        for (let i = 0; i < data.length; i++) {\n            crc ^= data[i];\n            for (let j = 0; j < 8; j++) {\n                if (crc & 0x0001) {\n                    crc = (crc >> 1) ^ 0xA001;\n                } else {\n                    crc = crc >> 1;\n                }\n            }\n        }\n        return crc;\n    }\n\n    // Function to convert number to hex string with leading zero\n    function toHex(num, padding = 2) {\n        return num.toString(16).toUpperCase().padStart(padding, '0');\n    }\n\n    // Determine action code\n    const actionCode = msg.buttons.action === \"flash-on\" ? 0x02 : 0x04;\n\n    // Convert delay to two bytes (big-endian)\n    const delayHigh = (msg.buttons.delay >> 8) & 0xFF;\n    const delayLow = msg.buttons.delay & 0xFF;\n\n    // Generate hex strings for each result\n    const hexStrings = [];\n\n    for (const result of msg.buttons.results) {\n        const device = result.device;\n        const relay = result.relay;\n\n        // Build data bytes for CRC calculation (first 6 bytes)\n        const dataBytes = [\n            device,           // AA - Device\n            0x05,             // BB - Command (always 05)\n            actionCode,       // CC - Action (02 or 04)\n            relay,            // DD - Relay\n            delayHigh,        // EE - Delay high byte\n            delayLow          // FF - Delay low byte\n        ];\n\n        // Calculate CRC16\n        const crc = calculateCRC16(dataBytes);\n        const crcHigh = (crc >> 8) & 0xFF;\n        const crcLow = crc & 0xFF;\n\n        // Build hex string\n        const hexString = `${toHex(device)} ${toHex(0x05)} ${toHex(actionCode)} ${toHex(relay)} ${toHex(delayHigh)} ${toHex(delayLow)} ${toHex(crcHigh)} ${toHex(crcLow)}`;\n\n        hexStrings.push(hexString);\n    }\n\n    // Return results\n    msg.hex = {\n        success: true,\n        action: msg.buttons.action,\n        delay: msg.buttons.delay,\n        hexStrings: hexStrings\n    };\n\n    return msg;\n\n} catch (error) {\n    msg.hex = {\n        success: false,\n        error: `An error occurred: ${error.message}`\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 220,
        "wires": [
            [
                "1398917f8ae8b55b"
            ]
        ]
    },
    {
        "id": "fdcf6fff3d42db3e",
        "type": "delay",
        "z": "c8fe70a7b946a093",
        "name": "Limit Selections ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "30",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 860,
        "y": 300,
        "wires": [
            [
                "2c7c34bca778a92a",
                "29a7c26cfc981268"
            ]
        ]
    },
    {
        "id": "f5bb88be4e43a428",
        "type": "file in",
        "z": "c8fe70a7b946a093",
        "name": "Read File",
        "filename": "filePath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 840,
        "y": 60,
        "wires": [
            [
                "79ea5306362d9155"
            ]
        ]
    },
    {
        "id": "7d8a47356596ed4f",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Create Global Object",
        "func": "try {\n    // Validate inputs\n    if (!msg.payload) {\n        msg.fileLoader = {\n            success: false,\n            error: \"msg.payload is required\"\n        };\n        return msg;\n    }\n\n    const cacheKey = msg.globalKey;\n    let data = msg.payload;\n\n    // If payload is a string, parse it as JSON\n    if (typeof data === 'string') {\n        try {\n            data = JSON.parse(data);\n        } catch (err) {\n            msg.fileLoader = {\n                success: false,\n                error: `Invalid JSON in payload: ${err.message}`\n            };\n            return msg;\n        }\n    }\n\n    // Validate data is an object\n    if (typeof data !== 'object' || data === null) {\n        msg.fileLoader = {\n            success: false,\n            error: \"Payload must be a valid JSON object\"\n        };\n        return msg;\n    }\n\n    // Store in global context (accessible everywhere in Node-RED)\n    global.set(cacheKey, data);\n\n    // Return success message\n    msg.fileLoader = {\n        success: true,\n        message: `Successfully stored data in global context`,\n        cacheKey: cacheKey,\n        dataKeys: Object.keys(data),\n        dataType: typeof data,\n        timestamp: new Date().toISOString()\n    };\n\n    return msg;\n\n} catch (error) {\n    msg.fileLoader = {\n        success: false,\n        error: `An unexpected error occurred: ${error.message}`\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 60,
        "wires": [
            [
                "56842ddf18c41bb5"
            ]
        ]
    },
    {
        "id": "003a83a6f1516bcf",
        "type": "inject",
        "z": "c8fe70a7b946a093",
        "name": "Request Configs",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "399f055406ac68ae"
            ]
        ]
    },
    {
        "id": "399f055406ac68ae",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Load Configs",
        "func": "msg.jukeboxData = global.get('jukeboxData');\nmsg.jukeboxCatalog = global.get('jukeboxCatalog');\nmsg.jukeboxConfig = global.get('jukeboxConfig');\nmsg.jukeboxPlaylists = global.get('jukeboxPlaylists');\n\nmsg.loadConfigs = {\n    success: true,\n    message: \"All configuration files are in the message\",\n    error: \"\",\n    timestamp: new Date().toISOString()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "9502699f0f7872d4"
            ]
        ]
    },
    {
        "id": "9502699f0f7872d4",
        "type": "debug",
        "z": "c8fe70a7b946a093",
        "name": "Display Configs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 140,
        "wires": []
    },
    {
        "id": "21c3e2488c737432",
        "type": "link in",
        "z": "c8fe70a7b946a093",
        "name": "Start JukeBox Processing",
        "links": [
            "6414e28ebba71050",
            "600884ef3fc39f5a",
            "7a2bdb26d2a37fb6",
            "55091995478ea561",
            "816b44b87d8fbb7c",
            "56842ddf18c41bb5",
            "045ae53afddec999",
            "a6c636ce71e692d6",
            "1bc31ccd4e46ae94"
        ],
        "x": 45,
        "y": 60,
        "wires": [
            [
                "d00b9434885b0c32"
            ]
        ]
    },
    {
        "id": "2a3df256abf2d178",
        "type": "debug",
        "z": "c8fe70a7b946a093",
        "name": "Show All Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 400,
        "wires": []
    },
    {
        "id": "387122cda5e872ed",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Load Globals",
        "func": "try {\n    // Configuration - Edit these paths to match your file locations\n    const config = [\n        {\n            globalKey: 'jukeboxData',\n            filePath: '/home/pi/jukebox/jukeboxData.json'\n        },\n        {\n            globalKey: 'jukeboxCatalog',\n            filePath: '/home/pi/jukebox/jukeboxCatalog.json'\n        },\n        {\n            globalKey: 'jukeboxConfig',\n            filePath: '/home/pi/jukebox/jukeboxConfig.json'\n        },\n        {\n            globalKey: 'jukeboxPlaylists',\n            filePath: '/home/pi/jukebox/jukeboxPlaylists.json'\n        }\n    ];\n\n    // Check each required file\n    for (const item of config) {\n        if (!global.get(item.globalKey)) {\n            msg.filePath = item.filePath;\n            msg.globalKey = item.globalKey;\n            node.send(msg);\n            return;\n        }\n    }\n\n    // All required data is loaded\n    const loadedFiles = config.reduce((acc, item) => {\n        acc[item.globalKey] = true;\n        return acc;\n    }, {});\n\n    msg.loadGlobals = {\n        success: true,\n        message: \"All required configuration files are loaded\",\n        ...loadedFiles,\n        error: \"\",\n        timestamp: new Date().toISOString()\n    };\n\n    return msg;\n\n} catch (error) {\n    msg.loadGlobals = {\n        success: false,\n        message: \"\",\n        error: `An unexpected error occurred: ${error.message}`,\n        timestamp: new Date().toISOString()\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 60,
        "wires": [
            [
                "c1604d67053ab4ca"
            ]
        ]
    },
    {
        "id": "c1604d67053ab4ca",
        "type": "switch",
        "z": "c8fe70a7b946a093",
        "name": "Are Globals Required?",
        "property": "loadGlobals.success",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 60,
        "wires": [
            [
                "c5a7042d9a6efc4c"
            ],
            [
                "f5bb88be4e43a428"
            ]
        ]
    },
    {
        "id": "56842ddf18c41bb5",
        "type": "link out",
        "z": "c8fe70a7b946a093",
        "name": "Got Globals",
        "mode": "link",
        "links": [
            "21c3e2488c737432"
        ],
        "x": 1465,
        "y": 60,
        "wires": []
    },
    {
        "id": "edb7b7fe6a65a20c",
        "type": "inject",
        "z": "c8fe70a7b946a093",
        "name": "Clear Configs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "095d6689d96f9449"
            ]
        ]
    },
    {
        "id": "095d6689d96f9449",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Delete Configs",
        "func": "// Delete multiple globals\nglobal.set('jukeboxData', undefined);\nglobal.set('jukeboxCatalog', undefined);\nglobal.set('jukeboxConfig', undefined);\nglobal.set('jukeboxPlaylists', undefined);\n\nmsg.deleteConfigs = {\n    success: true,\n    message: \"Global variables cleared\",\n    error: \"\",\n    timestamp: new Date().toISOString()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "9502699f0f7872d4"
            ]
        ]
    },
    {
        "id": "1f3ac8a45ebb0b48",
        "type": "inject",
        "z": "c8fe70a7b946a093",
        "name": "No request",
        "props": [
            {
                "p": "request",
                "v": "",
                "vt": "str"
            },
            {
                "p": "shuffle",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "045ae53afddec999"
            ]
        ]
    },
    {
        "id": "c5a7042d9a6efc4c",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Process Request To Selections",
        "func": "try {\n    // Get the request from msg\n    let request = msg.request;\n\n    // Get jukebox data and playlists from global context\n    const jukeboxData = global.get('jukeboxData');\n    const jukeboxPlaylists = global.get('jukeboxPlaylists');\n    const jukeboxConfig = global.get('jukeboxConfig');\n\n    if (!jukeboxData) {\n        msg.selectionParser = {\n            success: false,\n            error: \"jukeboxData not found in global context\"\n        };\n        return msg;\n    }\n\n    if (!jukeboxPlaylists) {\n        msg.selectionParser = {\n            success: false,\n            error: \"jukeboxPlaylists not found in global context\"\n        };\n        return msg;\n    }\n\n    if (!jukeboxConfig) {\n        msg.selectionParser = {\n            success: false,\n            error: \"jukeboxConfig not found in global context\"\n        };\n        return msg;\n    }\n\n    // If request is null/undefined, use default_request from config\n    if (!request && jukeboxConfig && jukeboxConfig.default_request) {\n        request = jukeboxConfig.default_request;\n    }\n\n    // Generate 'All' array from model selection structure\n    let allSelections = [];\n    let model = msg.model;\n\n    if (!model) {\n        if (jukeboxConfig && jukeboxConfig.model) {\n            model = jukeboxConfig.model;\n        }\n    }\n\n    if (!model) {\n        msg.selectionParser = {\n            success: false,\n            error: \"msg.model is required\"\n        };\n        return msg;\n    }\n\n    // Find the model in jukeboxData\n    let modelData = null;\n    for (const [brand, brandData] of Object.entries(jukeboxData)) {\n        if (brandData.models && brandData.models[model]) {\n            modelData = brandData.models[model];\n            break;\n        }\n    }\n\n    if (!modelData || !modelData.selection) {\n        msg.selectionParser = {\n            success: false,\n            error: `Model ${model} not found in jukeboxData or has no selection data`\n        };\n        return msg;\n    }\n\n    // Generate all possible values from the model's selection structure\n    const selection = modelData.selection;\n    const levels = Object.keys(selection).sort((a, b) => Number(a) - Number(b));\n\n    if (levels.length === 0) {\n        msg.selectionParser = {\n            success: false,\n            error: `Model ${model} has no selection levels`\n        };\n        return msg;\n    }\n\n    // Get options for each level\n    const levelOptions = [];\n    for (const level of levels) {\n        const options = Object.keys(selection[level]).sort();\n        levelOptions.push(options);\n    }\n\n    // Generate all combinations (as strings to support alphanumeric)\n    function generateCombinations(index, current) {\n        if (index === levelOptions.length) {\n            allSelections.push(current);\n            return;\n        }\n\n        for (const option of levelOptions[index]) {\n            generateCombinations(index + 1, current + option);\n        }\n    }\n\n    generateCombinations(0, \"\");\n\n    let selections = [];\n    let source = 'unknown';\n\n    // Case 1: Request is unset or 'All'\n    if (request.toLowerCase() === 'all') {\n        selections = allSelections;\n        source = 'all';\n    }\n    // Case 2: Request matches a playlist name\n    else if (jukeboxPlaylists[request]) {\n        const playlistSelections = jukeboxPlaylists[request];\n        if (Array.isArray(playlistSelections)) {\n            // Convert playlistSelections to strings for comparison\n            const playlistStrings = playlistSelections.map(sel => String(sel));\n            // Filter to only include selections that are in the allSelections array\n            selections = playlistStrings.filter(sel => allSelections.includes(sel));\n            source = 'playlist';\n        } else {\n            msg.selectionParser = {\n                success: false,\n                error: `Playlist ${request} does not contain a valid array`\n            };\n            return msg;\n        }\n    }\n    // Case 3: Parse as comma-separated list\n    else {\n        const parsed = request.split(',').map(item => {\n            const trimmed = item.trim();\n            if (trimmed === '') {\n                return null; // Skip empty values\n            }\n            return trimmed;\n        }).filter(item => item !== null); // Remove nulls\n\n        // Filter to only include selections that are in the allSelections array\n        selections = parsed.filter(sel => allSelections.includes(sel));\n        source = 'csv';\n    }\n\n    // Set the selections result\n    msg.selections = selections;\n\n    msg.selectionParser = {\n        success: true,\n        source: source,\n        model: model,\n        count: selections.length,\n        allCount: allSelections.length\n    };\n\n    return msg;\n\n} catch (error) {\n    msg.selectionParser = {\n        success: false,\n        error: `An unexpected error occurred: ${error.message}`\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 140,
        "wires": [
            [
                "5f715e31a7036605"
            ]
        ]
    },
    {
        "id": "f307fc96ff6777f2",
        "type": "inject",
        "z": "c8fe70a7b946a093",
        "name": "One request",
        "props": [
            {
                "p": "request",
                "v": "184",
                "vt": "str"
            },
            {
                "p": "shuffle",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "045ae53afddec999"
            ]
        ]
    },
    {
        "id": "554197eb44972d9d",
        "type": "inject",
        "z": "c8fe70a7b946a093",
        "name": "Two requests",
        "props": [
            {
                "p": "request",
                "v": "100,190",
                "vt": "str"
            },
            {
                "p": "shuffle",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "045ae53afddec999"
            ]
        ]
    },
    {
        "id": "73cb41daf85ebdcc",
        "type": "inject",
        "z": "c8fe70a7b946a093",
        "name": "Two requests and bad item",
        "props": [
            {
                "p": "request",
                "v": "100,190,abc",
                "vt": "str"
            },
            {
                "p": "shuffle",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "045ae53afddec999"
            ]
        ]
    },
    {
        "id": "580a2c34a4aac790",
        "type": "inject",
        "z": "c8fe70a7b946a093",
        "name": "One big bad",
        "props": [
            {
                "p": "request",
                "v": "dfwuydfgyfguy",
                "vt": "str"
            },
            {
                "p": "shuffle",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "045ae53afddec999"
            ]
        ]
    },
    {
        "id": "c94a1feca65ead78",
        "type": "inject",
        "z": "c8fe70a7b946a093",
        "name": "Playlist",
        "props": [
            {
                "p": "request",
                "v": "80s Pop Hits",
                "vt": "str"
            },
            {
                "p": "shuffle",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "045ae53afddec999"
            ]
        ]
    },
    {
        "id": "8492b3114d1bfb1a",
        "type": "inject",
        "z": "c8fe70a7b946a093",
        "name": "All",
        "props": [
            {
                "p": "request",
                "v": "All",
                "vt": "str"
            },
            {
                "p": "shuffle",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "045ae53afddec999"
            ]
        ]
    },
    {
        "id": "5f715e31a7036605",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Shuffle If Requested",
        "func": "try {\n    // Validate msg.selections exists\n    if (!msg.selections || !Array.isArray(msg.selections)) {\n        msg.shuffle = {\n            success: false,\n            error: \"msg.selections is required and must be an array\"\n        };\n        return msg;\n    }\n\n    const shuffle = msg.shuffle === true || msg.shuffle === 'true';\n    let result = msg.selections;\n\n    if (shuffle) {\n        // Fisher-Yates shuffle algorithm\n        function fisherYatesShuffle(array) {\n            const shuffled = [...array]; // Create a copy\n            for (let i = shuffled.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                // Swap elements at positions i and j\n                [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n            }\n            return shuffled;\n        }\n\n        result = fisherYatesShuffle(msg.selections);\n\n        msg.shuffle = {\n            success: true,\n            shuffled: true,\n            count: result.length,\n            timestamp: new Date().toISOString()\n        };\n    } else {\n        msg.shuffle = {\n            success: true,\n            shuffled: false,\n            count: result.length,\n            timestamp: new Date().toISOString()\n        };\n    }\n\n    msg.selections = result;\n\n    return msg;\n\n} catch (error) {\n    msg.shuffle = {\n        success: false,\n        error: `An unexpected error occurred: ${error.message}`\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 140,
        "wires": [
            [
                "58f0d2c2d6f93def"
            ]
        ]
    },
    {
        "id": "521ec1d855e7e7d7",
        "type": "inject",
        "z": "c8fe70a7b946a093",
        "name": "Shuffled Playlist",
        "props": [
            {
                "p": "request",
                "v": "80s Pop Hits",
                "vt": "str"
            },
            {
                "p": "shuffle",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 800,
        "wires": [
            [
                "045ae53afddec999"
            ]
        ]
    },
    {
        "id": "58f0d2c2d6f93def",
        "type": "split",
        "z": "c8fe70a7b946a093",
        "name": "Split Selections",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "selections",
        "x": 860,
        "y": 220,
        "wires": [
            [
                "149a6de027fe32fa"
            ]
        ]
    },
    {
        "id": "d00b9434885b0c32",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Start",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 60,
        "wires": [
            [
                "387122cda5e872ed"
            ]
        ]
    },
    {
        "id": "045ae53afddec999",
        "type": "link out",
        "z": "c8fe70a7b946a093",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "21c3e2488c737432"
        ],
        "x": 385,
        "y": 560,
        "wires": []
    },
    {
        "id": "67ada12e6e61f6da",
        "type": "inject",
        "z": "c8fe70a7b946a093",
        "name": "Queue Reset",
        "props": [
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "fdcf6fff3d42db3e"
            ]
        ]
    },
    {
        "id": "79ea5306362d9155",
        "type": "json",
        "z": "c8fe70a7b946a093",
        "name": "Convert To JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1050,
        "y": 60,
        "wires": [
            [
                "7d8a47356596ed4f"
            ]
        ]
    },
    {
        "id": "149a6de027fe32fa",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Get Artist",
        "func": "try {\n    // Validate msg.selections exists\n    if (!msg.selections) {\n        msg.catalogLookup = {\n            success: false,\n            error: \"msg.selections is required\"\n        };\n        return msg;\n    }\n\n    // Get jukeboxCatalog from global context\n    const jukeboxCatalog = global.get('jukeboxCatalog');\n\n    if (!jukeboxCatalog) {\n        msg.catalogLookup = {\n            success: false,\n            error: \"jukeboxCatalog not found in global context\"\n        };\n        return msg;\n    }\n\n    // Look up the selection in the catalog\n    const selectionKey = String(msg.selections);\n\n    if (jukeboxCatalog[selectionKey]) {\n        msg.catalog = {\n            selection: selectionKey,\n            ...jukeboxCatalog[selectionKey]\n        };\n\n        msg.catalogLookup = {\n            success: true,\n            found: true,\n            timestamp: new Date().toISOString()\n        };\n    } else {\n        // Selection not found in catalog\n        msg.catalog = {\n            selection: selectionKey,\n            artist: \"Unknown\",\n            title: \"Unknown\",\n            duration: \"0:00\"\n        };\n\n        msg.catalogLookup = {\n            success: true,\n            found: false,\n            timestamp: new Date().toISOString()\n        };\n    }\n\n    return msg;\n\n    return msg;\n\n} catch (error) {\n    msg.catalogLookup = {\n        success: false,\n        error: `An unexpected error occurred: ${error.message}`\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 220,
        "wires": [
            [
                "2bc0b6d6993d8060"
            ]
        ]
    },
    {
        "id": "d7aceb5788251e15",
        "type": "http in",
        "z": "c8fe70a7b946a093",
        "name": "HTTP Request",
        "url": "/jukebox",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 600,
        "y": 500,
        "wires": [
            [
                "4d4c643033b8a59c"
            ]
        ]
    },
    {
        "id": "4d4c643033b8a59c",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Handle Http Request",
        "func": "msg.request = msg.req.query.request;\nmsg.shuffle = msg.req.query.shuffle === \"false\"; // optional: convert to boolean\nmsg.action = msg.req.query.action;\nmsg.playlist = msg.req.query.playlist;\nmsg.playlist_name = msg.req.query.playlist_name;\n\nmsg.payload = {\n    success: true,\n    action: msg.action,\n    request: msg.request,\n    shuffle: msg.shuffle,\n    playlist: msg.playlist,\n    playlist_name: msg.playlist_name\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 500,
        "wires": [
            [
                "3b84bcf4d8e8d812"
            ]
        ]
    },
    {
        "id": "add6a7bf8f108edb",
        "type": "http response",
        "z": "c8fe70a7b946a093",
        "name": "HTTP Return",
        "statusCode": "200",
        "headers": {},
        "x": 1390,
        "y": 620,
        "wires": []
    },
    {
        "id": "3b84bcf4d8e8d812",
        "type": "switch",
        "z": "c8fe70a7b946a093",
        "name": "Select Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "selection",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "playlists",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "playlist_entries",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 590,
        "y": 640,
        "wires": [
            [
                "1bc31ccd4e46ae94",
                "add6a7bf8f108edb"
            ],
            [
                "c55a4fd64c5b980d"
            ],
            [
                "5f0132c2317c1fdc"
            ],
            [
                "c58645b24301b4c4"
            ]
        ]
    },
    {
        "id": "9c62cf0cf5130b26",
        "type": "link in",
        "z": "c8fe70a7b946a093",
        "name": "Reset Link",
        "links": [
            "71cc3cc4f4a19aec",
            "2856341f7dc63a70"
        ],
        "x": 725,
        "y": 340,
        "wires": [
            [
                "fdcf6fff3d42db3e"
            ]
        ]
    },
    {
        "id": "c55a4fd64c5b980d",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Set Reset Flag",
        "func": "msg.reset = true\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 660,
        "wires": [
            [
                "add6a7bf8f108edb",
                "2856341f7dc63a70"
            ]
        ]
    },
    {
        "id": "5f0132c2317c1fdc",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Get Playlists",
        "func": "try {\n    // Check if jukeboxPlaylists is loaded\n    let jukeboxPlaylists = global.get('jukeboxPlaylists');\n\n    if (!jukeboxPlaylists) {\n        // Not loaded - send message to load it\n        msg.payload = '/home/pi/jukebox/jukeboxPlaylists.json';\n        msg.topic = 'jukeboxPlaylists';\n        msg.playlistList = {\n            success: false,\n            error: \"jukeboxPlaylists not loaded - requesting load\",\n            action: \"load_requested\"\n        };\n        node.send(msg);\n        return;\n    }\n\n    // Get list of playlist names\n    const playlistNames = Object.keys(jukeboxPlaylists);\n\n    // Set the payload as a simple array of names\n    msg.payload = playlistNames;\n\n    msg.playlistList = {\n        success: true,\n        count: playlistNames.length,\n        timestamp: new Date().toISOString()\n    };\n  \n    return msg;\n\n} catch (error) {\n    msg.playlistList = {\n        success: false,\n        error: `An unexpected error occurred: ${error.message}`\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 740,
        "wires": [
            [
                "add6a7bf8f108edb",
                "37000f12daa89a94"
            ]
        ]
    },
    {
        "id": "c58645b24301b4c4",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Get Playlist Entries",
        "func": "try {\n    // Validate msg.playlist_name exists\n    if (!msg.playlist_name) {\n        msg.playlistEntries = {\n            success: false,\n            error: \"msg.playlist_name is required\"\n        };\n        return msg;\n    }\n\n    // Get jukeboxPlaylists and jukeboxCatalog from global context\n    const jukeboxPlaylists = global.get('jukeboxPlaylists');\n    const jukeboxCatalog = global.get('jukeboxCatalog');\n\n    if (!jukeboxPlaylists) {\n        msg.playlistEntries = {\n            success: false,\n            error: \"jukeboxPlaylists not found in global context\"\n        };\n        return msg;\n    }\n\n    if (!jukeboxCatalog) {\n        msg.playlistEntries = {\n            success: false,\n            error: \"jukeboxCatalog not found in global context\"\n        };\n        return msg;\n    }\n\n    // Get the playlist\n    const playlistName = msg.playlist_name;\n    const playlist = jukeboxPlaylists[playlistName];\n\n    if (!playlist) {\n        msg.playlistEntries = {\n            success: false,\n            error: `Playlist '${playlistName}' not found`\n        };\n        return msg;\n    }\n\n    if (!Array.isArray(playlist)) {\n        msg.playlistEntries = {\n            success: false,\n            error: `Playlist '${playlistName}' is not a valid array`\n        };\n        return msg;\n    }\n\n    // Build array of entries with catalog info\n    const entries = [];\n\n    for (const selection of playlist) {\n        const selectionKey = String(selection);\n\n        if (jukeboxCatalog[selectionKey]) {\n            entries.push({\n                selection: selectionKey,\n                artist: jukeboxCatalog[selectionKey].artist,\n                title: jukeboxCatalog[selectionKey].title,\n                duration: jukeboxCatalog[selectionKey].duration\n            });\n        } else {\n            // Selection not in catalog\n            entries.push({\n                selection: selectionKey,\n                artist: \"Unknown\",\n                title: \"Unknown\",\n                duration: \"0:00\"\n            });\n        }\n    }\n\n    // Set the payload\n    msg.payload = entries;\n\n    msg.playlistEntries = {\n        success: true,\n        playlistName: playlistName,\n        count: entries.length,\n        timestamp: new Date().toISOString()\n    };\n\n    return msg;\n\n} catch (error) {\n    msg.playlistEntries = {\n        success: false,\n        error: `An unexpected error occurred: ${error.message}`\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 820,
        "wires": [
            [
                "add6a7bf8f108edb",
                "37000f12daa89a94"
            ]
        ]
    },
    {
        "id": "772a6ecd815cd9a1",
        "type": "link in",
        "z": "c8fe70a7b946a093",
        "name": "Debug Entire Message",
        "links": [
            "37000f12daa89a94",
            "29a7c26cfc981268",
            "594602675dc4e329"
        ],
        "x": 725,
        "y": 400,
        "wires": [
            [
                "2a3df256abf2d178"
            ]
        ]
    },
    {
        "id": "1bc31ccd4e46ae94",
        "type": "link out",
        "z": "c8fe70a7b946a093",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "21c3e2488c737432"
        ],
        "x": 1075,
        "y": 580,
        "wires": []
    },
    {
        "id": "37000f12daa89a94",
        "type": "link out",
        "z": "c8fe70a7b946a093",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "772a6ecd815cd9a1"
        ],
        "x": 1075,
        "y": 760,
        "wires": []
    },
    {
        "id": "2856341f7dc63a70",
        "type": "link out",
        "z": "c8fe70a7b946a093",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "9c62cf0cf5130b26"
        ],
        "x": 1075,
        "y": 700,
        "wires": []
    },
    {
        "id": "1398917f8ae8b55b",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Add Rate in ms",
        "func": "try {\n    const MIN_SECONDS = 30;\n    const MAX_SECONDS = 390; // 6 minutes 30 seconds\n\n    // Function to parse duration string to seconds\n    function parseToSeconds(value) {\n        if (!value) return null;\n\n        const str = String(value).trim();\n\n        // Check if it's in MM:SS format\n        if (str.includes(':')) {\n            const parts = str.split(':');\n            if (parts.length !== 2) return null;\n\n            const minutes = parseInt(parts[0], 10);\n            const seconds = parseInt(parts[1], 10);\n\n            if (isNaN(minutes) || isNaN(seconds)) return null;\n            if (seconds < 0 || seconds >= 60) return null;\n\n            return (minutes * 60) + seconds;\n        } else {\n            // It's just seconds\n            const seconds = parseInt(str, 10);\n            if (isNaN(seconds)) return null;\n            return seconds;\n        }\n    }\n\n    // Function to validate if seconds are in range\n    function isValidRange(seconds) {\n        if (seconds === null || seconds === undefined) return false;\n        return seconds >= MIN_SECONDS && seconds <= MAX_SECONDS;\n    }\n\n    // Get jukeboxConfig\n    const jukeboxConfig = global.get('jukeboxConfig');\n\n    let finalSeconds = null;\n\n    // Try to use msg.catalog.duration first\n    if (msg.catalog && msg.catalog.duration) {\n        const catalogSeconds = parseToSeconds(msg.catalog.duration);\n        if (isValidRange(catalogSeconds)) {\n            finalSeconds = catalogSeconds;\n        }\n    }\n\n    // If catalog duration is not valid, try default_rate from config\n    if (finalSeconds === null && jukeboxConfig && jukeboxConfig.default_rate) {\n        const defaultSeconds = parseToSeconds(jukeboxConfig.default_rate);\n        if (isValidRange(defaultSeconds)) {\n            finalSeconds = defaultSeconds;\n        }\n    }\n\n    // Set msg.rate if we have a valid value, otherwise delete it\n    if (finalSeconds !== null) {\n        msg.rate = finalSeconds * 1000; // Convert to milliseconds\n\n        msg.rateCalculator = {\n            success: true,\n            seconds: finalSeconds,\n            milliseconds: msg.rate,\n            source: (msg.catalog && msg.catalog.duration && parseToSeconds(msg.catalog.duration) === finalSeconds) ? 'catalog' : 'default',\n            timestamp: new Date().toISOString()\n        };\n    } else {\n        delete msg.rate;\n\n        msg.rateCalculator = {\n            success: false,\n            error: \"No valid rate found in catalog.duration or config.default_rate\",\n            timestamp: new Date().toISOString()\n        };\n    }\n\n    return msg;\n\n} catch (error) {\n    delete msg.rate;\n    msg.rateCalculator = {\n        success: false,\n        error: `An unexpected error occurred: ${error.message}`\n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 220,
        "wires": [
            [
                "fdcf6fff3d42db3e"
            ]
        ]
    },
    {
        "id": "2c7c34bca778a92a",
        "type": "function",
        "z": "c8fe70a7b946a093",
        "name": "Serialize",
        "func": "msg = {\n    payload: msg.hex.hexStrings,\n    selection: msg.catalog.selection,\n    artist: msg.catalog.artist,\n    title: msg.catalog.title,\n    duration: msg.catalog.duration \n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 300,
        "wires": [
            [
                "2c52d91d899fe853"
            ]
        ]
    },
    {
        "id": "2c52d91d899fe853",
        "type": "split",
        "z": "c8fe70a7b946a093",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1230,
        "y": 300,
        "wires": [
            [
                "eda28dd024dd0a70"
            ]
        ]
    },
    {
        "id": "eda28dd024dd0a70",
        "type": "delay",
        "z": "c8fe70a7b946a093",
        "name": "Limit Button Presses",
        "pauseType": "rate",
        "timeout": "8",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1440,
        "y": 300,
        "wires": [
            [
                "594602675dc4e329"
            ]
        ]
    },
    {
        "id": "29a7c26cfc981268",
        "type": "link out",
        "z": "c8fe70a7b946a093",
        "name": "Selection Out",
        "mode": "link",
        "links": [
            "772a6ecd815cd9a1"
        ],
        "x": 975,
        "y": 340,
        "wires": []
    },
    {
        "id": "594602675dc4e329",
        "type": "link out",
        "z": "c8fe70a7b946a093",
        "name": "Buttons Out",
        "mode": "link",
        "links": [
            "772a6ecd815cd9a1"
        ],
        "x": 1625,
        "y": 300,
        "wires": []
    }
]